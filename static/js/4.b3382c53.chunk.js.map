{"version":3,"sources":["components/log-entry/LogEntry.js","routes/logs-overview/LogsOverview.js"],"names":["LogEntry","props","className","onClick","customClickEvent","logEntry","content","navigation","datetime","value","substr","Rotor","width","height","Position","longitude","position","latitude","CourseOverGround","courseOverGround","courseOverGroundTrue","SpeedThroughWater","speedThroughWater","Current","drift","environment","current","setTrue","LogDetails","lazy","LogsOverview","handleWindowSizeChange","setState","window","innerWidth","state","selectedLog","logs","selectLog","bind","selectPath","path","this","selectedPath","removeEventListener","addEventListener","log","id","MobileView","DesktopView","React","Component","connect","getLogs","getSelectedLog","length","map","index","key","to","pathname"],"mappings":"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","file":"static/js/4.b3382c53.chunk.js","sourcesContent":["import React from 'react';\nimport './LogEntry.css'\nimport Icons from '../icons'\n\nexport function LogEntry(props) {\n  return (\n    <div className=\"card\" onClick={props.customClickEvent}>\n      <div className=\"container\">\n        <div className={\"time\"}>\n          {props.logEntry.content.navigation.datetime\n            ? props.logEntry.content.navigation.datetime.value.substr(11, 8)\n            : 'No time available'\n          }\n        </div>\n        <div className={\"title\"}>\n          Engine on\n        </div>\n        <div className={\"type-icon\"}>\n          <Icons.Rotor\n            width={\"60px\"}\n            height={\"60px\"}\n          />\n        </div>\n        <div className={\"d1\"}>\n          <Icons.Position\n            longitude={props.logEntry.content.navigation.position.value.longitude}\n            latitude={props.logEntry.content.navigation.position.value.latitude}\n            width={\"60px\"}\n            height={\"60px\"}\n          />\n        </div>\n        <div className={\"d2\"}>\n          <Icons.CourseOverGround\n            width={\"60px\"}\n            height={\"60px\"}\n            courseOverGround={props.logEntry.content.navigation.courseOverGroundTrue.value}\n          />\n        </div>\n        <div className={\"d3\"}>\n          <Icons.SpeedThroughWater\n            width={\"60px\"}\n            height={\"60px\"}\n            speedThroughWater={props.logEntry.content.navigation.speedThroughWater.value}\n          />\n        </div>\n        <div className={\"d4\"}>\n          <Icons.Current\n            width={\"60px\"}\n            height={\"60px\"}\n            drift={props.logEntry.content.environment.current.value.drift}\n            setTrue={props.logEntry.content.environment.current.value.setTrue}\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React, { lazy } from 'react';\nimport { Link } from 'react-router-dom';\nimport { LogEntry } from '../../components/log-entry/LogEntry';\nimport './LogsOverview.css'\nimport { connect } from 'react-redux';\nimport { getLogs, getSelectedLog } from '../../redux/selectors';\nimport { selectLog, selectPath } from '../../redux/actions';\n\nconst LogDetails = lazy(() => import('../../routes/log-details/LogDetails'));\n\nconst mapStateToProps = state => {\n  return {\n    logs: getLogs(state),\n    selectedLog: getSelectedLog(state)\n  }\n};\n\nclass LogsOverview extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: window.innerWidth,\n      selectedLog: null,\n      logs: null\n    };\n    this.selectLog = this.selectLog.bind(this);\n    this.selectPath = this.selectPath.bind(this);\n  }\n\n  selectPath(path) {\n    this.setState({selectedPath: path});\n    this.props.selectPath(path);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize',\n      this.handleWindowSizeChange);\n  }\n\n  handleWindowSizeChange = () => {\n    this.setState({\n      width: window.innerWidth,\n    });\n  };\n\n  componentDidMount() {\n    window.addEventListener('resize',\n      this.handleWindowSizeChange);\n  }\n\n  selectLog(log) {\n    this.setState({selectedLog: log});\n    this.props.selectLog(log.id, log.content)\n  }\n\n  render() {\n    const {width} = this.state;\n    const isMobile = width <= 500;\n\n    if (isMobile) {\n      return <MobileView logs={this.props.logs} selectLog={this.selectLog} selectPath={this.selectPath}/>;\n    } else {\n      return <DesktopView logs={this.props.logs} selectedLog={this.state.selectedLog} selectLog={this.selectLog} />\n\n    }\n  }\n}\n\nexport default connect(mapStateToProps, { selectLog, selectPath })(LogsOverview);\n\nfunction DesktopView(props) {\n  return (\n    <div className={\"logs-view\"}>\n      <div className={\"log-list\"}>\n        {props.logs && props.logs.length\n          ? props.logs.map((log, index) => {\n            return <LogEntry key={`log-${log.id}`} logEntry={log} customClickEvent={props.selectLog.bind(this, log)}/>\n          })\n          : 'No Logs yet!'}\n      </div>\n      {!props.selectedLog && <div>Select Log</div>}\n      {props.selectedLog && <LogDetails/>}\n    </div>\n  )\n}\n\nfunction MobileView(props) {\n  return (\n    <div className={\"log-list App-content\"}>\n      {props.logs && props.logs.length\n        ? props.logs.map((log, index) => {\n          return <Link key={`log-${log.id}`}  to={{\n            pathname: \"/logs/details\",\n          }} onClick={() => {props.selectLog(log); props.selectPath(\"/logs/details\")}}>\n            <LogEntry logEntry={log}/>\n          </Link>\n        })\n        : 'No Logs yet!'}\n    </div>\n  )\n}\n"],"sourceRoot":""}